const Table = require('../../models/Table');
const User = require('../../models/User');
const bcrypt = require('bcrypt');

// üèì 1Ô∏è‚É£ T·∫°o b√†n bida m·ªõi (POST /tables/create)
exports.createTable = async (req, res) => {
    try {
        const { name, image, description, oldPrice, newPrice, location, category, status } = req.body;

        if (!name || !image) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin!" });
        }

        const newTable = new Table({
            name,
            image,
            description,
            oldPrice,
            newPrice,
            location,
            category,
            status: status || "available" // M·∫∑c ƒë·ªãnh l√† b√†n tr·ªëng
        });

        await newTable.save();
        res.status(201).json({ message: "Th√™m b√†n th√†nh c√¥ng!", table: newTable });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi th√™m b√†n!", error: error.message });
    }
};

// üèì 2Ô∏è‚É£ L·∫•y th√¥ng tin m·ªôt b√†n bida (GET /tables/update/:id/edit)
exports.getTable = async (req, res) => {
    try {
        const table = await Table.findById(req.params.id);
        if (!table) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n bida." });
        }
        res.status(200).json(table);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
};

// üèì 3Ô∏è‚É£ C·∫≠p nh·∫≠t b√†n bida (PUT /tables/update/:id)
exports.updateTable = async (req, res) => {
    try {
        const table = await Table.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!table) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n bida." });
        }
        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", table });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t!", error: error.message });
    }
};

// üèì 4Ô∏è‚É£ X√≥a b√†n bida (DELETE /tables/:id)
exports.deleteTable = async (req, res) => {
    try {
        const table = await Table.findByIdAndDelete(req.params.id);
        if (!table) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n bida ƒë·ªÉ x√≥a." });
        }
        res.status(200).json({ message: "B√†n bida ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a b√†n!", error: error.message });
    }
};

// üèì 5Ô∏è‚É£ L·∫•y danh s√°ch b√†n bida (GET /tables)
exports.getAllTables = async (req, res) => {
    try {
        const { status, category, sort, q, page = 1, limit = 8 } = req.query;
        const skip = (page - 1) * limit;

        const filter = {};
        if (status) filter.status = status; // L·ªçc theo tr·∫°ng th√°i n·∫øu c√≥
        if (category && category !== "T·∫•t c·∫£") filter.category = category;
        if (q) filter.name = { $regex: q, $options: "i" };

        const tables = await Table.find(filter)
            .sort(sort === "asc" ? { name: 1 } : { name: -1 })
            .skip(skip)
            .limit(parseInt(limit));

        if (tables.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n n√†o ph√π h·ª£p!" });
        }

        res.json({ data: tables, total: tables.length });
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch b√†n:", error);
        res.status(500).json({ message: "L·ªói server!", error: error.message });
    }
};
// üèì 6Ô∏è‚É£ L·∫•y chi ti·∫øt b√†n bida theo slug (GET /tables/:slug)
exports.getTableBySlug = async (req, res) => {
    try {
        const table = await Table.findOne({ slug: req.params.slug }).lean();
        if (!table) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†n bida." });
        }
        res.json(table);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin b√†n!", error: error.message });
    }
};

// üèì L·∫•y danh s√°ch b√†n bida c√≥ th·ªÉ ƒë·∫∑t (GET /tables)
exports.getAvailableTables = async (req, res) => {
    try {
        const { selectedTime } = req.query;

        if (!selectedTime || isNaN(Date.parse(selectedTime))) {
            return res.status(400).json({ error: "Th·ªùi gian kh√¥ng h·ª£p l·ªá!" });
        }

        // L·∫•y danh s√°ch b√†n ƒë√£ ƒë·∫∑t v√†o th·ªùi gian ƒë√≥
        const bookedTables = await Booking.find({ "tables.time": selectedTime }).distinct("tables.tableId");

        // L·∫•y danh s√°ch b√†n c√≤n tr·ªëng
        const availableTables = await Table.find({ _id: { $nin: bookedTables }, status: "available" });

        res.json({ success: true, availableTables });
    } catch (error) {
        console.error("L·ªói l·∫•y b√†n tr·ªëng:", error);
        res.status(500).json({ error: "L·ªói server!" });
    }
};

